// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DePara {
  id          Int      @id @default(autoincrement())
  fileName    String?
  arquivoCSV  Json? // Armazena os dados do CSV em formato JSON
  description String?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  observacoes String?

  generationDDL   DDLGeneration?
  generationDDLId Int?
  User            User?          @relation(fields: [userId], references: [id])
  userId          Int?

  @@index([status])
  @@index([generationDDLId])
  @@map("de_para")
}

model DDLGeneration {
  id          Int     @id @default(autoincrement())
  version     String?
  fileName    String?
  data        Json? // Armazena os dados do CSV em formato JSON
  description String?

  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  dePara   DePara @relation(fields: [deParaId], references: [id], onDelete: Cascade)
  deParaId Int    @unique
  User     User?  @relation(fields: [userId], references: [id])
  userId   Int?

  @@index([deParaId])
  @@index([fileName])
  @@index([version])
  @@map("ddl_generation")
}

// Models for NextAuth.js

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String // Armazena a senha do usu√°rio

  accounts Account[]
  sessions Session[]

  deParas        DePara[]
  DDLGenerations DDLGeneration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Optional fields for OAuth
  access_token      String? // Optional fields for OAuth
  expires_at        Int? // Optional fields for OAuth
  token_type        String? // Optional fields for OAuth
  scope             String? // Optional fields for OAuth
  id_token          String? // Optional fields for OAuth
  session_state     String? // Optional fields for OAuth

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
