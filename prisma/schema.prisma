// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DePara {
  id          Int      @id @default(autoincrement())
  fileName    String?
  arquivoCSV  Json? // Armazena os dados do CSV em formato JSON
  description String?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  observacoes String?

  generationDDL   DDLGeneration?
  generationDDLId Int?
  CSVData         CSVData[]

  @@index([status])
  @@index([generationDDLId])
  @@map("de_para")
}

model DDLGeneration {
  id          Int     @id @default(autoincrement())
  version     String?
  fileName    String?
  data        Json? // Armazena os dados do CSV em formato JSON
  description String?

  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  dePara   DePara @relation(fields: [deParaId], references: [id], onDelete: Cascade)
  deParaId Int    @unique

  @@index([deParaId])
  @@index([fileName])
  @@index([version])
  @@map("ddl_generation")
}

model CSVData {
  id      Int      @id @default(autoincrement())
  niv     String?
  campo   String?
  redef   String?
  gru     String?
  fmtB    String?
  pIni    Int?
  tam     Int?
  intB    Int?
  decB    Int?
  pic     String?
  usage   String?
  sinal   String?
  occDe   Int?
  occAte  Int?
  depON   String?
  pk      String?
  tpConv  String?
  padr    String?
  coluna  String?
  varhost String?
  fmtC    String?
  intC    Int?
  decC    Int?
  null    Boolean?
  excd    Boolean?
  pfx     String?
  sfx     String?
  trunc   Boolean?
  dup     Boolean?
  cpoBase String?

  // Relacionamento com a tabela AKData
  akData AKData[] // Um registro CSVData pode ter múltiplos registros AKData

  dePara   DePara @relation(fields: [deParaId], references: [id], onDelete: Cascade)
  deParaId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deParaId])
  @@map("csv_data")
}

model AKData {
  id        Int     @id @default(autoincrement())
  columnKey String // Nome da coluna AK (ex: "AK1", "AK2", etc.)
  value     String? // Valor correspondente à coluna AK
  csvData   CSVData @relation(fields: [csvDataId], references: [id], onDelete: Cascade)
  csvDataId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([csvDataId])
  @@index([columnKey])
  @@map("ak_data")
}
